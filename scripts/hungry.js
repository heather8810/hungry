// Generated by CoffeeScript 1.6.3
(function() {
  var App, EmptyMenuView, Entree, EntreeList, EntreeListCompositeView, EntreeView, MEALS, MS_PER_DAY, Menu, MenuView, createEntreeList, formatDate, getEndpoint, today, tomorrow, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  formatDate = function(dateObject) {
    var dd, mm, yyyy;
    dd = dateObject.getDate();
    mm = dateObject.getMonth() + 1;
    yyyy = dateObject.getFullYear();
    if (dd < 10) {
      dd = '0' + dd;
    }
    if (mm < 10) {
      mm = '0' + mm;
    }
    return "" + yyyy + "-" + mm + "-" + dd;
  };

  today = formatDate(new Date());

  MS_PER_DAY = 24 * 60 * 60 * 1000;

  tomorrow = formatDate(new Date(new Date().getTime() + MS_PER_DAY));

  getEndpoint = function(date, meal) {
    return "http://food.cs50.net/api/1.3/menus?meal=" + meal + "&sdt=" + date + "&output=jsonp&callback=?";
  };

  today = "2013-05-02";

  tomorrow = "2013-05-03";

  MEALS = [
    {
      date: today,
      meal: "lunch"
    }, {
      date: today,
      meal: "dinner"
    }, {
      date: tomorrow,
      meal: "lunch"
    }
  ];

  _.each(MEALS, function(o) {
    o.url = getEndpoint(o.date, o.meal);
    if (o.date === today) {
      o.type = "today";
    }
    if (o.date === tomorrow) {
      return o.type = "tomorrow";
    }
  });

  createEntreeList = function(obj) {
    var model, o;
    o = _.extend({}, obj);
    o.entrees = _.map(o.entrees, function(e) {
      return new Entree(e);
    });
    return model = new EntreeList(o);
  };

  Entree = (function(_super) {
    __extends(Entree, _super);

    function Entree() {
      _ref = Entree.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Entree;

  })(Backbone.Model);

  EntreeList = (function(_super) {
    __extends(EntreeList, _super);

    function EntreeList() {
      _ref1 = EntreeList.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return EntreeList;

  })(Backbone.Model);

  Menu = (function(_super) {
    __extends(Menu, _super);

    function Menu() {
      _ref2 = Menu.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Menu.prototype.model = EntreeList;

    Menu.prototype.fetch = function(options) {
      var collection, promises;
      collection = this;
      promises = _.map(MEALS, function(o) {
        return $.getJSON(o.url);
      });
      return $.when.apply($, promises).then((function(data) {
        var i, meals, rawMeals, _i, _ref3;
        rawMeals = _.map(arguments, _.first);
        meals = _.map(rawMeals, function(meal) {
          var mealObject;
          mealObject = {};
          mealObject.entrees = _.chain(meal).map(function(item) {
            return _.chain(item).pick(['meal', 'date', 'name', 'category']).value();
          }).filter(function(i) {
            var _ref3;
            return (_ref3 = i.category) === "ENTREES";
          }).value();
          mealObject.meal = mealObject.entrees[0].meal;
          return mealObject;
        });
        for (i = _i = 0, _ref3 = meals.length - 1; 0 <= _ref3 ? _i <= _ref3 : _i >= _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
          meals[i] = _.extend(meals[i], MEALS[i]);
        }
        return collection.reset(_.map(meals, function(entreeList) {
          return createEntreeList(entreeList);
        }));
      }), (function(error) {
        return console.error(error);
      }));
    };

    return Menu;

  })(Backbone.Collection);

  EntreeView = (function(_super) {
    __extends(EntreeView, _super);

    function EntreeView() {
      _ref3 = EntreeView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    EntreeView.prototype.tagName = "li";

    EntreeView.prototype.template = "#entree-item";

    return EntreeView;

  })(Marionette.ItemView);

  EntreeListCompositeView = (function(_super) {
    __extends(EntreeListCompositeView, _super);

    function EntreeListCompositeView() {
      _ref4 = EntreeListCompositeView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    EntreeListCompositeView.prototype.className = "meal-menu";

    EntreeListCompositeView.prototype.template = "#meal-menu";

    EntreeListCompositeView.prototype.itemView = EntreeView;

    EntreeListCompositeView.prototype.itemViewContainer = "ul";

    EntreeListCompositeView.prototype.initialize = function() {
      return this.collection = new Backbone.Collection(this.model.get("entrees"));
    };

    return EntreeListCompositeView;

  })(Marionette.CompositeView);

  EmptyMenuView = (function(_super) {
    __extends(EmptyMenuView, _super);

    function EmptyMenuView() {
      _ref5 = EmptyMenuView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    EmptyMenuView.prototype.tagName = "div";

    EmptyMenuView.prototype.template = "#empty-menu";

    EmptyMenuView.prototype.initialize = function() {
      return console.log("empty");
    };

    return EmptyMenuView;

  })(Marionette.ItemView);

  MenuView = (function(_super) {
    __extends(MenuView, _super);

    function MenuView() {
      _ref6 = MenuView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    MenuView.prototype.itemView = EntreeListCompositeView;

    MenuView.prototype.itemViewContainer = "div";

    MenuView.prototype.emptyView = EmptyMenuView;

    MenuView.prototype.initialize = function() {
      return console.log(this.model);
    };

    return MenuView;

  })(Marionette.CollectionView);

  App = new Marionette.Application();

  App.addRegions({
    mainRegion: "#food-menu"
  });

  App.mainRegion.open = function(view) {
    this.$el.hide();
    this.$el.html(view.el);
    return this.$el.fadeIn(800);
  };

  App.addInitializer(function(options) {
    var HungryMenu;
    HungryMenu = new Menu();
    HungryMenu.fetch();
    return HungryMenu.on("reset", function() {
      var menuView;
      menuView = new MenuView({
        collection: this
      });
      return App.mainRegion.show(menuView);
    });
  });

  App.start();

}).call(this);
